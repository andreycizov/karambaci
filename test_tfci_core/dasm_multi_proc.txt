# todo: how to enable picking of the code version so that the loaded 'x' functions have been actually loaded
# todo: we could set the deployment id (that is also the range)

# todo: so how do we stop certain ctxs then?
# todo: e.g. a thread is running; how do we intercept the running context and then enforce it's update;
# todo:      dx

# todo: <code> selects the deployment version.

callback_fn:
    callback_fix v=v vi=vi x=x
    j _ret

ret_fn:
    clr
    hlt

# todo: requires:
# todo: @arg v: array of payloads to the parallel sub-routine []
# todo: @arg x: address of the subroutine that will be run in parallel for each of the items
# todo:
# todo: TODO: implement proper rate-limiting (e.g. max number of parallel requests)
fork_loop:
    ld i=%0
    # todo: we need to either be able to reference the parent contexts explicitly (which probably is going to be quite slow)
    exr "len(x[1])" length v
    ld remaining_threads=length
    uuid4 lock_id
    lock_create lock_id # lock_create must not generate a lock id - ID needs to be created before hands.
    fork_loop_compare:
        je i length @fork_loop_end # jump to $2 if $0 == $1
        exr "x[1][x[2]]" v_item v i
        #arr_get x v i
        # todo: the issue is that fork MUST get the actual value of the variable somehow (?)
        push v=v_item vi=i x=x
        uuid4 fork_id
        # todo: if we fork, then the parent context never gets it's ref count increased
        fork fork_id @fork_loop_enter_subroutine # -> increase the ctx ref count (forked with the same context)
        pop
        exr "x[0] + x[1]" i %1
        logger "INFO" "Looping {}" i
    j @fork_loop_compare

    fork_loop_enter_subroutine:
        # do something with $v here

        # push items on the stack, push the return address on the stack
        push v=v vi=vi x=x _ret=@fork_loop_exit_subroutine
        j x
        fork_loop_exit_subroutine: clr

    fork_loop_exit_subroutine_tail:

        # pull __psp # [PARENT_STACK] [SUBTHREAD_STACK] [PARENT_STACK]
        # we can not compare at this specific context because we'd reuse a variable, then ?
        exr "x[1]-x[2]" ^remaining_threads ^remaining_threads %1
        # x "int_dec" ^remaining_threads ^remaining_threads "1" # should HLT cause the context to be deleted as well (?)
        jne ^remaining_threads %0 @fork_loop_exit_still_running
            # pop # [PARENT_STACK] [SUBTHREAD_STACK]

            # todo: we're trying to lock a global lock using the current sub-thread stack
            # todo: otherwise we need some sort of referencing parent contexts, which is not optimal
            # str_add ^lock_id "-" vi
            exr "''.join(str(y) for y in x[1:])" locking_id ^lock_id "-" vi

            lock_try_lock ^lock_id locking_id is_locked

            je is_locked %1 @fork_loop_winner

            clr
            j @fork_loop_end

    fork_loop_exit_still_running:
        clr # [PARENT_STACK] [SUBTHREAD_STACK]
        # pop # [PARENT_STACK]
        hlt

    fork_loop_end:
        # end of loop
        hlt


    fork_loop_winner:
        clr # [PARENT_STACK]
        lock_free lock_id
        j _ret